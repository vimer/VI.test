{
  "name": "koa-middlewares",
  "version": "1.7.0",
  "description": "easy way to require some useful koa middlewares",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dead-horse/koa-middlewares.git"
  },
  "keywords": [
    "koa",
    "middlewares",
    "session",
    "render",
    "jsonp",
    "body"
  ],
  "author": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com",
    "url": "http://deadhorse.me"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dead-horse/koa-middlewares/issues"
  },
  "homepage": "https://github.com/dead-horse/koa-middlewares",
  "dependencies": {
    "koa-bodyparser": "~1.3.0",
    "koa-compress": "~1.0.8",
    "koa-conditional-get": "~1.0.2",
    "koa-csrf": "~2.1.3",
    "koa-ejs": "~1.1.2",
    "koa-etag": "~2.0.0",
    "koa-favicon": "~1.2.0",
    "koa-generic-session": "~1.3.0",
    "koa-logger": "~1.2.2",
    "koa-onerror": "~1.2.0",
    "koa-redis": "~1.0.0",
    "koa-resource-router": "~0.3.3",
    "koa-rewrite": "~1.1.0",
    "koa-router": "~3.7.0",
    "koa-rt": "~0.0.2",
    "koa-safe-jsonp": "~0.3.0",
    "koa-session": "~2.0.0",
    "koa-static-cache": "~2.0.0"
  },
  "devDependencies": {
    "autod": "^1.1.2",
    "koa": "~0.13.0"
  },
  "files": [
    "index.js"
  ],
  "readme": "koa-middlewares\n===============\n\n[![Dependency Status](https://gemnasium.com/cnpm/koa-middlewares.svg)](https://gemnasium.com/dead-horse/koa-middlewares)\n\neasy way to use some small but useful koa middlewares.\n\n**PRs** are welcome, but only for those small and general middlewares.\n\n## install\n\n```\nnpm install koa-middlewares --save\n```\n\n## middlewares\n\n* [koa-bodyparser](https://github.com/dead-horse/koa-body-parser)\n* [koa-compress](https://github.com/koajs/koa-compress)\n* [koa-conditional-get](https://github.com/koajs/koa-conditional-get)\n* [koa-csrf](https://github.com/koajs/csrf)\n* [koa-ejs](https://github.com/dead-horse/koa-ejs)\n* [koa-etag](https://github.com/koajs/etag)\n* [koa-favicon](https://github.com/koajs/favicon)\n* [koa-generic-session](https://github.com/koajs/generic-session)\n* [koa-logger](https://github.com/koajs/logger)\n* [koa-onerror](https://github.com/koajs/onerror)\n* [koa-redis](https://github.com/dead-horse/koa-redis)\n* [koa-resource-router](https://github.com/alexmingoia/koa-resource-router)\n* [koa-rewrite](https://github.com/koajs/rewrite)\n* [koa-router](https://github.com/alexmingoia/koa-router)\n* [koa-rt](https://github.com/dead-horse/koa-rt)\n* [koa-safe-jsonp](https://github.com/koajs/koa-safe-jsonp)\n* [koa-session](https://github.com/koajs/session)\n* [koa-static-cache](https://github.com/koajs/static-cache)\n\nsee [exports](index.js)\n\n## Usage\n\n```js\n\nvar koa = require('koa');\nvar middlewares = require('koa-middlewares');\n\nvar app = koa();\n\napp.use(middlewares.bodyParser());\napp.use(middlewares.router(app));\napp.use(middlewares.conditional());\napp.use(middlewares.etag());\napp.use(middlewares.compress());\nmiddlewares.csrf(app);\n\napp.use(function *() {\n  this.body = 'hello koa-middlewares';\n});\n\napp.listen(7001);\n```\n\n## Middlewares Quick Guide\n\n* **koa-bodyparser**: post body parser,\nfor `application/json` and `application/x-www-form-urlencoded`.\n\n```\napp.use(middlewares.bodyParser({\n  limit: '10mb'\n}));\n\napp.use(function *(next) {\n  var postBody = this.request.body;\n});\n```\n\n* **koa-csrf**: CSRF tokens.\n\n```\nmiddlewares.csrf(app);\napp.use(function *checkCsrf(next) {\n  if (this.method === 'GET' ||\n      this.method === 'HEAD' ||\n      this.method === 'OPTIONS') {\n    return yield *next;\n  }\n\n  this.assertCsrf();\n  yield next;\n});\n```\n\n* **koa-ejs**: ejs view render middleware. support all feature of ejs.\n\n```\nmiddlewares.render(app, {\n  root: path.join(__dirname, 'view')\n});\n\napp.use(function *() {\n  yield this.render('page.html', {foo: 'bar'});\n});\n```\n\n* **koa-etag**: ETag support for Koa responses.\n* **koa-conditional-get**: HTTP response freshness testing middleware base on node-fresh.\nuse it upstream from etag.\n\n```\napp.use(middlewares.conditional());\napp.use(middlewares.etag());\n```\n\n* **koa-favicon**: Bounce favicon requests with a 404.\n\n```\napp.use(middlewares.favicon());\n```\n\n* **koa-safe-jsonp**: A safe jsonp plugins for koa.\n\n```\nmiddlewares.jsonp(app);\n\napp.use(function* () {\n  this.jsonp = {foo: 'bar'};\n});\n```\n\n* **koa-logger**: Development style logger.\n\n```\napp.use(middlewares.logger());\n```\n\n* **koa-session**: cookie base session.\n\n```\napp.use(middlewares.cookieSession());\n```\n\n* **koa-generic-session**: A session like connect with memory,\nhas friendly APIs for work with other Stores such as `redis`, `mongo`.\n* **koa-redis**: Work togather with `koa-generic-session`, provide a redis store from koa-sess.\n\n```\napp.use(middlewares.session({\n  store: middlewares.RedisStore(),\n  defer: true\n}));\n\napp.use(function *() {\n  var session = yield this.session;\n  session.foo = 'bar';\n  this.body = this.session.foo;\n});\n```\n\n* **koa-router**: Provide express-style routing using app.get, app.put, app.post.\n\n```\napp.use(middlewares.router(app));\napp.get('/', function *() {\n  this.body = 'Hello koa-router';\n});\n```\n\n* **koa-resource-router**: RESTful resource routing for koa.\n\n```\nvar users = new middlewares.Resource('users');\napp.use(users.middleware());\n\napp.get('/users', function *() {\n  this.body = [{name: 'Lee'}, {name: 'Han'}];\n});\n```\n\n* **koa-rewrite**: URL rewrite middleware.\n\n```\napp.use(middlewares.rewrite('/js/*', '/public/assets/js/$1'));\n```\n\n* **koa-rt**: Log response time, support custom with microtime.\n\n```\nvar microtime = require('microtime');\napp.use(middlewares.rt({\n  timer: microtime\n}));\n```\n\n* **koa-static-cache**: Static file serving from memory.\n\n```\napp.use(middlewares.staticCache(path.join(__dirname, 'public'), {\n  buffer: true,\n  maxAge: 60 * 60 * 24 * 7,\n  dir: path.join(rootdir, 'public')\n}));\n```\n\n* **koa-compress**: Compress middleware for Koa, support `gzip` and `deflate`\n\n```\nvar app = koa()\napp.use(compress({\n  threshold: 2048,\n  flush: require('zlib').Z_SYNC_FLUSH\n}))\n```\n\n* **koa-onerror**: Error handler\n\n```\nvar app = koa()\nonerror(app);\n```\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "koa-middlewares@1.7.0",
  "_shasum": "d61071dd48a21b1508286a4472714952a7404908",
  "_from": "koa-middlewares@^1.2.0",
  "_resolved": "https://registry.npmjs.org/koa-middlewares/-/koa-middlewares-1.7.0.tgz"
}
